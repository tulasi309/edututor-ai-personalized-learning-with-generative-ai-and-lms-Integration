# -*- coding: utf-8 -*-
"""Edu Tutor AI: Personalized Learning with Generative AI and LMS Integration

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/138Neka1684Pgxn75bcRRS6FrZfP1hskO
"""


from transformers import AutoModelForCausalLM, AutoTokenizer, set_seed
import torch

model_name = "ibm-granite/granite-3.3-2b-instruct"
device = "cuda" if torch.cuda.is_available() else "cpu"

model = AutoModelForCausalLM.from_pretrained(
    model_name,
    device_map="auto",
    torch_dtype=torch.bfloat16 if device=="cuda" else torch.float32
)
tokenizer = AutoTokenizer.from_pretrained(model_name)
def query_granite(prompt, max_tokens=512, temperature=0.7, thinking=True):
    conv = [{"role":"user", "content": prompt}]
    inputs = tokenizer.apply_chat_template(conv,
        return_tensors="pt", thinking=thinking,
        return_dict=True, add_generation_prompt=True
    ).to(model.device)
    set_seed(42)
    output = model.generate(**inputs, max_new_tokens=max_tokens)
    resp = tokenizer.decode(output[0, inputs["input_ids"].shape[1]:], skip_special_tokens=True)
    return resp
import gradio as gr

def concept_understanding(concept):
    prompt = f"Explain the concept of {concept} in detail, as if teaching over 15 years."
    return query_granite(prompt)

def language_learning(text, language):
    prompt = f"Analyze this text in {language}: '{text}'. Provide grammar review and parts of speech."
    return query_granite(prompt)

import pdfplumber
def test_generator_from_pdf(pdf_file):
    text = ""
    with pdfplumber.open(pdf_file) as pdf:
        for page in pdf.pages:
            text += page.extract_text() + "\n"
    prompt = f"Generate meaningful quiz questions based on the following text:\n{text}\nProvide questions, multiple choices, and answers."
    return query_granite(prompt, max_tokens=1024)

with gr.Blocks() as demo:
    gr.Markdown("# Edutor AI")
    with gr.Tab("Concept Understanding"):
        concept = gr.Textbox(label="Concept")
        out1 = gr.Textbox(label="Explanation")
        concept.submit(lambda c: out1.update(value=concept_understanding(c)))
    with gr.Tab("Language Learning"):
        txt = gr.Textbox(label="Text")
        lang = gr.Dropdown(["English","Hindi"], label="Language")
        out2 = gr.Textbox(label="Analysis")
        btn2 = gr.Button("Analyze")
        btn2.click(lambda t,l: out2.update(value=language_learning(t,l)), [txt,lang])
    with gr.Tab("Test Generator"):
        pdf = gr.File(label="Upload PDF")
        out3 = gr.Textbox(label="Quiz")
        btn3 = gr.Button("Generate Quiz")
        btn3.click(lambda f: out3.update(value=test_generator_from_pdf(f)), pdf)
demo.launch(share=True)